scalar Void
scalar Date

type Query {
  ping: String!

  # Who knows
  whoKnowsArtist(
    artist: ArtistInput!
    settings: WhoKnowsSettings
  ): WhoKnowsArtistResponse
  whoKnowsAlbum(
    album: AlbumInput!
    settings: WhoKnowsSettings
  ): WhoKnowsAlbumResponse
  whoKnowsTrack(
    track: TrackInput!
    settings: WhoKnowsSettings
  ): WhoKnowsTrackResponse

  # Who first/who last
  whoFirstArtist(artist: ArtistInput!, settings: WhoKnowsSettings, whoLast: Boolean): WhoFirstArtistResponse 

  # Guild members
  guildMembers(guildID: String!): [GuildMember!]!

  # Counts
  artistTopTracks(
    user: UserInput!
    artist: ArtistInput!
  ): ArtistTopTracksResponse
  artistTopAlbums(
    user: UserInput!
    artist: ArtistInput!
  ): ArtistTopAlbumsResponse
  albumTopTracks(user: UserInput!, album: AlbumInput!): AlbumTopTracksResponse
  trackTopAlbums(user: UserInput!, track: TrackInput!): TrackTopAlbumsResponse

  # Search
  searchArtist(
    criteria: ArtistSearchCriteria!
    settings: SearchSettings
  ): ArtistSearchResults

  # Plays
  plays(playsInput: PlaysInput!, pageInput: PageInput): [Play!]!
  artistPlays(user: UserInput!, settings: ArtistPlaysSettings): [ArtistCount!]!
  albumPlays(user: UserInput!, settings: AlbumPlaysSettings): [AlbumCount!]!
  trackPlays(user: UserInput!, settings: TrackPlaysSettings): [AmbiguousTrackCount!]!

  # Ratings
  ratings(settings: RatingsSettings): [Rating!]!
  rateYourMusicArtist(keywords: String!): RateYourMusicArtist
}

type Mutation {
  login(username: String!, session: String, discordID: String!, userType: UserType!): User
  logout(discordID: String!): Void

  # Guild member syncing
  addUserToGuild(discordID: String!, guildID: String!): GuildMember
  removeUserFromGuild(discordID: String!, guildID: String!): Void
  syncGuild(guildID: String!, discordIDs: [String!]!): Void

  # .fm indexing
  fullIndex(user: UserInput!, forceUserCreate: Boolean): TaskStartResponse
  update(user: UserInput!, forceUserCreate: Boolean): TaskStartResponse

  # Ratings
  importRatings(csv: String!, user: UserInput!): Void
  
  # Tags
  tagArtists(artists: [ArtistInput!]!, tags: [TagInput!]!): Void
}

##############
# Base Types #
##############

enum UserType {
  Wavy
  Lastfm
}

type User {
  id: Int!
  username: String!
  discordID: String!

  userType: UserType
}

type GuildMember {
  userID: Int!
  guildID: String!

  user: User
}

type Artist {
  id: Int!
  name: String!
}

type ArtistCount {
  artist: Artist!
  playcount: Int!
}

type Album {
  id: Int!
  name: String!
  artist: Artist!

  tracks: [Track!]
}

type AlbumCount {
  album: Album!
  playcount: Int!
}

type Track {
  id: Int!
  name: String!
  artist: Artist!
  album: Album
}

type TrackCount {
  track: Track!
  playcount: Int!
}

type AmbiguousTrack {
  name: String!
  artist: String!

  albums: [Album!]
}

type AmbiguousTrackCount {
  name: String!
  playcount: Int!
}

type Play {
  id: Int!
  scrobbledAt: Int!
  user: User!
  track: Track!
}

type Rating {
  rateYourMusicAlbum: RateYourMusicAlbum!
  rating: Int!
}

type RateYourMusicAlbum {
	rateYourMusicID: String!
	title: String!
	releaseYear: Int
	artistName: String!
	artistNativeName: String
}

type RateYourMusicArtist {
	artistName: String!
	artistNativeName: String
}

##################
# Response Types #
##################

type TaskStartResponse {
  taskName: String!
  success: Boolean!
  token: String!
}

# Who Knows
type WhoKnowsRow {
  user: User!
  playcount: Int!
}

type WhoKnowsArtistResponse {
  rows: [WhoKnowsRow!]!
  artist: Artist!
}

type WhoKnowsAlbumResponse {
  rows: [WhoKnowsRow!]!
  album: Album!
}

type WhoKnowsTrackResponse {
  rows: [WhoKnowsRow!]!
  track: AmbiguousTrack!
}

# Who First
type WhoFirstRow {
  user: User!
  scrobbledAt: Int!
}

type WhoFirstArtistResponse {
  rows: [WhoFirstRow!]!
  artist: Artist!
}

# type WhoKnowsAlbumResponse {
#   rows: [WhoKnowsRow!]!
#   album: Album!
# }

# type WhoKnowsTrackResponse {
#   rows: [WhoKnowsRow!]!
#   track: AmbiguousTrack!
# }

# Counts
type ArtistTopTracksResponse {
  artist: Artist!
  topTracks: [AmbiguousTrackCount!]!
}

type ArtistTopAlbumsResponse {
  artist: Artist!
  topAlbums: [AlbumCount!]!
}

type AlbumTopTracksResponse {
  album: Album!
  topTracks: [AmbiguousTrackCount!]!
}

type TrackTopAlbumsResponse {
  track: AmbiguousTrack!
  topAlbums: [TrackCount!]!
}

# Search
type ArtistSearchResults {
  artists: [ArtistSearchResult!]!
}

type ArtistSearchResult {
  artistID: Int!
  artistName: String!
  listenerCount: Int!
  globalPlaycount: Int!
}

###############
# Input Types #
###############

input UserInput {
  discordID: String
  lastFMUsername: String
  wavyUsername: String
}

input ArtistInput {
  name: String
}

input AlbumInput {
  artist: ArtistInput
  name: String
}

input TrackInput {
  artist: ArtistInput
  album: AlbumInput
  name: String
}

input WhoKnowsSettings {
  guildID: String
  limit: Int
}

input ArtistSearchCriteria {
  keywords: String
}

input SearchSettings {
  exact: Boolean
  user: UserInput
}

input PageInput {
  limit: Int
}

input ArtistPlaysSettings {
  pageInput: PageInput
  artist: ArtistInput
  sort: String
}

input AlbumPlaysSettings {
  pageInput: PageInput
  album: AlbumInput
  sort: String
}

input TrackPlaysSettings {
  pageInput: PageInput
  track: TrackInput
  sort: String
}

input RatingsSettings {
  user: UserInput
  album: AlbumInput
  pageInput: PageInput
}

input PlaysInput {
  user: UserInput
  track: TrackInput
  sort: String
}

input TagInput {
  name: String
}
