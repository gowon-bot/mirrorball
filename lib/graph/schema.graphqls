scalar Void
scalar Date

type Query {
  ping: String!

  artists(
    inputs: [ArtistInput!]
    tag: TagInput
    pageInput: PageInput
    requireTagsForMissing: Boolean
  ): [Artist!]!

  # Who knows
  whoKnowsArtist(
    artist: ArtistInput!
    settings: WhoKnowsSettings
  ): WhoKnowsArtistResponse
  whoKnowsAlbum(
    album: AlbumInput!
    settings: WhoKnowsSettings
  ): WhoKnowsAlbumResponse
  whoKnowsTrack(
    track: TrackInput!
    settings: WhoKnowsSettings
  ): WhoKnowsTrackResponse

  # Ranks
  artistRank(
    artist: ArtistInput!
    userInput: UserInput!
    serverID: String
  ): ArtistRankResponse!

  # Who first/who last
  whoFirstArtist(
    artist: ArtistInput!
    settings: WhoKnowsSettings
    whoLast: Boolean
  ): WhoFirstArtistResponse

  # Users
  guildMembers(guildID: String!): [GuildMember!]!
  users(inputs: [UserInput!]!): [User!]!

  # Counts
  artistTopTracks(
    user: UserInput!
    artist: ArtistInput!
  ): ArtistTopTracksResponse
  artistTopAlbums(
    user: UserInput!
    artist: ArtistInput!
  ): ArtistTopAlbumsResponse
  albumTopTracks(user: UserInput!, album: AlbumInput!): AlbumTopTracksResponse
  trackTopAlbums(user: UserInput!, track: TrackInput!): TrackTopAlbumsResponse

  # Search
  searchArtist(
    criteria: ArtistSearchCriteria!
    settings: SearchSettings
  ): ArtistSearchResults

  # Plays
  plays(playsInput: PlaysInput!, pageInput: PageInput): PlaysResponse!
  artistPlays(user: UserInput!, settings: ArtistPlaysSettings): [ArtistCount!]!
  albumPlays(user: UserInput!, settings: AlbumPlaysSettings): [AlbumCount!]!
  trackPlays(
    user: UserInput!
    settings: TrackPlaysSettings
  ): [AmbiguousTrackCount!]!

  # Ratings
  ratings(settings: RatingsSettings): RatingsResponse!
  rateYourMusicArtist(keywords: String!): RateYourMusicArtist

  # Tags
  tags(settings: TagsSettings, requireTagsForMissing: Boolean): TagsResponse!
}

type Mutation {
  # Users
  login(
    username: String!
    session: String
    discordID: String!
    userType: UserType!
  ): User
  logout(discordID: String!): Void
  updatePrivacy(user: UserInput!, privacy: Privacy): Void

  # Guild member syncing
  addUserToGuild(discordID: String!, guildID: String!): GuildMember
  removeUserFromGuild(discordID: String!, guildID: String!): Void
  syncGuild(guildID: String!, discordIDs: [String!]!): Void
  deleteGuild(guildID: String!): Void

  # .fm indexing
  fullIndex(user: UserInput!, forceUserCreate: Boolean): TaskStartResponse
  update(user: UserInput!, forceUserCreate: Boolean): TaskStartResponse

  # Ratings
  importRatings(csv: String!, user: UserInput!): Void

  # Tags
  tagArtists(
    artists: [ArtistInput!]!
    tags: [TagInput!]!
    markAsChecked: Boolean
  ): Void
}

##############
# Base Types #
##############

type PageInfo {
  recordCount: Int!
}

input Timerange {
  from: Date
  to: Date
}

enum UserType {
  Wavy
  Lastfm
}

enum Privacy {
  PRIVATE
  DISCORD
  FMUSERNAME
  BOTH
  UNSET
}

type User {
  id: Int!
  username: String!
  discordID: String!

  userType: UserType
  privacy: Privacy
}

type GuildMember {
  userID: Int!
  guildID: String!

  user: User
}

type Artist {
  id: Int!
  name: String!

  tags: [String!]!
}

type ArtistCount {
  artist: Artist!
  playcount: Int!

  user: User!
}

type Album {
  id: Int!
  name: String!
  artist: Artist!

  tracks: [Track!]
}

type AlbumCount {
  album: Album!
  playcount: Int!
}

type Track {
  id: Int!
  name: String!
  artist: Artist!
  album: Album
}

type TrackCount {
  track: Track!
  playcount: Int!
}

type AmbiguousTrack {
  name: String!
  artist: String!

  albums: [Album!]
}

type AmbiguousTrackCount {
  name: String!
  playcount: Int!
}

type Play {
  id: Int!
  scrobbledAt: Int!
  user: User!
  track: Track!
}

type Rating {
  rateYourMusicAlbum: RateYourMusicAlbum!
  rating: Int!
}

type RateYourMusicAlbum {
  rateYourMusicID: String!
  title: String!
  releaseYear: Int
  artistName: String!
  artistNativeName: String
}

type RateYourMusicArtist {
  artistName: String!
  artistNativeName: String
}

##################
# Response Types #
##################

type TaskStartResponse {
  taskName: String!
  success: Boolean!
  token: String!
}

type PlaysResponse {
  plays: [Play!]!
  pageInfo: PageInfo!
}

# Who Knows
type WhoKnowsRow {
  user: User!
  playcount: Int!
}

type WhoKnowsArtistResponse {
  rows: [WhoKnowsRow!]!
  artist: Artist!
}

type WhoKnowsAlbumResponse {
  rows: [WhoKnowsRow!]!
  album: Album!
}

type WhoKnowsTrackResponse {
  rows: [WhoKnowsRow!]!
  track: AmbiguousTrack!
}

# Who First
type WhoFirstRow {
  user: User!
  scrobbledAt: Int!
}

type WhoFirstArtistResponse {
  rows: [WhoFirstRow!]!
  undated: [WhoFirstRow!]!
  artist: Artist!
}

# Ratings
type RatingsResponse {
  ratings: [Rating!]!
  pageInfo: PageInfo!
}

# Tags
type Tag {
  name: String!
  occurrences: Int!
}

type TagsResponse {
  tags: [Tag!]!
  pageInfo: PageInfo!
}

# Counts
type ArtistTopTracksResponse {
  artist: Artist!
  topTracks: [AmbiguousTrackCount!]!
}

type ArtistTopAlbumsResponse {
  artist: Artist!
  topAlbums: [AlbumCount!]!
}

type AlbumTopTracksResponse {
  album: Album!
  topTracks: [AmbiguousTrackCount!]!
}

type TrackTopAlbumsResponse {
  track: AmbiguousTrack!
  topAlbums: [TrackCount!]!
}

# Search
type ArtistSearchResults {
  artists: [ArtistSearchResult!]!
}

type ArtistSearchResult {
  artistID: Int!
  artistName: String!
  listenerCount: Int!
  globalPlaycount: Int!
}

# Ranks
type ArtistRankResponse {
  artist: Artist
  rank: Int!
  playcount: Int!
  listeners: Int!

  above: ArtistCount
  below: ArtistCount
}

###############
# Input Types #
###############

input UserInput {
  discordID: String
  lastFMUsername: String
  wavyUsername: String
}

input ArtistInput {
  name: String
}

input AlbumInput {
  artist: ArtistInput
  name: String
}

input TrackInput {
  artist: ArtistInput
  album: AlbumInput
  name: String
}

input WhoKnowsSettings {
  guildID: String
  limit: Int
  userIDs: [String!]
}

input ArtistSearchCriteria {
  keywords: String
}

input SearchSettings {
  exact: Boolean
  user: UserInput
}

input PageInput {
  limit: Int
  offset: Int
}

input ArtistPlaysSettings {
  pageInput: PageInput
  artist: ArtistInput
  sort: String
}

input AlbumPlaysSettings {
  pageInput: PageInput
  album: AlbumInput
  sort: String
}

input TrackPlaysSettings {
  pageInput: PageInput
  track: TrackInput
  sort: String
}

input RatingsSettings {
  user: UserInput
  album: AlbumInput
  pageInput: PageInput
  rating: Int
}

input PlaysInput {
  user: UserInput
  track: TrackInput
  sort: String
  timerange: Timerange
}

input TagInput {
  name: String
}

input TagsSettings {
  artists: [ArtistInput!]
  keyword: String
  pageInput: PageInput
}
