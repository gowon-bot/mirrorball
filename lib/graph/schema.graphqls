type Query {
  users: [User!]!
  getUser(username: String!): User!

  userTopArtists(username: String!): Int!

  whoKnows(artist: String!): WhoKnowsResponse!
  whoKnowsAlbum(artist: String!, album: String!): WhoKnowsAlbumResponse!
  whoKnowsTrack(artist: String!, track: String!): WhoKnowsTrackResponse!
}

type Mutation {
  indexUser(username: String!): TaskStartResponse!
  updateUser(username: String!): TaskStartResponse!

  saveTrack(artist: String!, album: String, track: String!): Track!
}

type User {
  id: Int!
  lastFMUsername: String!
}

type TaskStartResponse {
  success: Boolean!
  token: String!
}

type Artist {
  id: Int!
  name: String!
}

type Album {
  id: Int!
  name: String!
  artist: Artist
}

type Track {
  id: Int!
  name: String!
  artist: Artist!
  album: Album
}

type AmbiguousTrack {
  name: String!
  artist: Artist!
}

type TopArtists {
  artists: [TopArtist!]!
  total: Int!
}

type TopArtist {
  artist: Artist!
  plays: Int!
  rank: Int!
}

type WhoKnowsResponse {
  users: [WhoKnows!]!
  artist: Artist
}

type WhoKnows {
  artist: Artist!
  user: User!
  playcount: Int!
}

type WhoKnowsAlbumResponse {
  users: [WhoKnowsAlbum!]!
  album: Album
}

type WhoKnowsAlbum {
  album: Album!
  user: User!
  playcount: Int!
}

type WhoKnowsTrackResponse {
  users: [WhoKnowsTrack!]!
  track: AmbiguousTrack
}

type WhoKnowsTrack {
  track: AmbiguousTrack!
  user: User!
  playcount: Int!
}
